/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type GetTripsRequest = {
    /**
     * The ID of the origin station
     */
    origin: string;
    /**
     * The ID of the destination station
     */
    destination: string;
    /**
     * The date and time of the trip in ISO 8601 format in origin station's timezone.
     */
    date: Date;
    /**
     * Only return trips where bicycles are known to be allowed
     */
    bicycles?: boolean | undefined;
    /**
     * Only return trips where dogs are known to be allowed
     */
    dogs?: boolean | undefined;
};

export type GetTripsTripsLinks = {
    self?: string | undefined;
    next?: string | undefined;
    prev?: string | undefined;
};

/**
 * This is a generic request/response wrapper which contains both data and links which serve as hypermedia controls (HATEOAS).
 */
export type GetTripsTripsResponseBody = {
    data?: Array<components.Trip> | undefined;
    links?: GetTripsTripsLinks | undefined;
};

export type GetTripsLinks = {
    self?: string | undefined;
    next?: string | undefined;
    prev?: string | undefined;
};

/**
 * This is a generic request/response wrapper which contains both data and links which serve as hypermedia controls (HATEOAS).
 */
export type GetTripsResponseBody = {
    data?: Array<components.Trip> | undefined;
    links?: GetTripsLinks | undefined;
};

export type GetTripsResponseResult = GetTripsResponseBody | Uint8Array | string;

export type GetTripsResponse = {
    headers: { [k: string]: Array<string> };
    result: GetTripsResponseBody | Uint8Array | string;
};

/** @internal */
export const GetTripsRequest$inboundSchema: z.ZodType<GetTripsRequest, z.ZodTypeDef, unknown> =
    z.object({
        origin: z.string(),
        destination: z.string(),
        date: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        bicycles: z.boolean().default(false),
        dogs: z.boolean().default(false),
    });

/** @internal */
export type GetTripsRequest$Outbound = {
    origin: string;
    destination: string;
    date: string;
    bicycles: boolean;
    dogs: boolean;
};

/** @internal */
export const GetTripsRequest$outboundSchema: z.ZodType<
    GetTripsRequest$Outbound,
    z.ZodTypeDef,
    GetTripsRequest
> = z.object({
    origin: z.string(),
    destination: z.string(),
    date: z.date().transform((v) => v.toISOString()),
    bicycles: z.boolean().default(false),
    dogs: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTripsRequest$ {
    /** @deprecated use `GetTripsRequest$inboundSchema` instead. */
    export const inboundSchema = GetTripsRequest$inboundSchema;
    /** @deprecated use `GetTripsRequest$outboundSchema` instead. */
    export const outboundSchema = GetTripsRequest$outboundSchema;
    /** @deprecated use `GetTripsRequest$Outbound` instead. */
    export type Outbound = GetTripsRequest$Outbound;
}

/** @internal */
export const GetTripsTripsLinks$inboundSchema: z.ZodType<
    GetTripsTripsLinks,
    z.ZodTypeDef,
    unknown
> = z.object({
    self: z.string().optional(),
    next: z.string().optional(),
    prev: z.string().optional(),
});

/** @internal */
export type GetTripsTripsLinks$Outbound = {
    self?: string | undefined;
    next?: string | undefined;
    prev?: string | undefined;
};

/** @internal */
export const GetTripsTripsLinks$outboundSchema: z.ZodType<
    GetTripsTripsLinks$Outbound,
    z.ZodTypeDef,
    GetTripsTripsLinks
> = z.object({
    self: z.string().optional(),
    next: z.string().optional(),
    prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTripsTripsLinks$ {
    /** @deprecated use `GetTripsTripsLinks$inboundSchema` instead. */
    export const inboundSchema = GetTripsTripsLinks$inboundSchema;
    /** @deprecated use `GetTripsTripsLinks$outboundSchema` instead. */
    export const outboundSchema = GetTripsTripsLinks$outboundSchema;
    /** @deprecated use `GetTripsTripsLinks$Outbound` instead. */
    export type Outbound = GetTripsTripsLinks$Outbound;
}

/** @internal */
export const GetTripsTripsResponseBody$inboundSchema: z.ZodType<
    GetTripsTripsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    data: z.array(components.Trip$inboundSchema).optional(),
    links: z.lazy(() => GetTripsTripsLinks$inboundSchema).optional(),
});

/** @internal */
export type GetTripsTripsResponseBody$Outbound = {
    data?: Array<components.Trip$Outbound> | undefined;
    links?: GetTripsTripsLinks$Outbound | undefined;
};

/** @internal */
export const GetTripsTripsResponseBody$outboundSchema: z.ZodType<
    GetTripsTripsResponseBody$Outbound,
    z.ZodTypeDef,
    GetTripsTripsResponseBody
> = z.object({
    data: z.array(components.Trip$outboundSchema).optional(),
    links: z.lazy(() => GetTripsTripsLinks$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTripsTripsResponseBody$ {
    /** @deprecated use `GetTripsTripsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetTripsTripsResponseBody$inboundSchema;
    /** @deprecated use `GetTripsTripsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetTripsTripsResponseBody$outboundSchema;
    /** @deprecated use `GetTripsTripsResponseBody$Outbound` instead. */
    export type Outbound = GetTripsTripsResponseBody$Outbound;
}

/** @internal */
export const GetTripsLinks$inboundSchema: z.ZodType<GetTripsLinks, z.ZodTypeDef, unknown> =
    z.object({
        self: z.string().optional(),
        next: z.string().optional(),
        prev: z.string().optional(),
    });

/** @internal */
export type GetTripsLinks$Outbound = {
    self?: string | undefined;
    next?: string | undefined;
    prev?: string | undefined;
};

/** @internal */
export const GetTripsLinks$outboundSchema: z.ZodType<
    GetTripsLinks$Outbound,
    z.ZodTypeDef,
    GetTripsLinks
> = z.object({
    self: z.string().optional(),
    next: z.string().optional(),
    prev: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTripsLinks$ {
    /** @deprecated use `GetTripsLinks$inboundSchema` instead. */
    export const inboundSchema = GetTripsLinks$inboundSchema;
    /** @deprecated use `GetTripsLinks$outboundSchema` instead. */
    export const outboundSchema = GetTripsLinks$outboundSchema;
    /** @deprecated use `GetTripsLinks$Outbound` instead. */
    export type Outbound = GetTripsLinks$Outbound;
}

/** @internal */
export const GetTripsResponseBody$inboundSchema: z.ZodType<
    GetTripsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    data: z.array(components.Trip$inboundSchema).optional(),
    links: z.lazy(() => GetTripsLinks$inboundSchema).optional(),
});

/** @internal */
export type GetTripsResponseBody$Outbound = {
    data?: Array<components.Trip$Outbound> | undefined;
    links?: GetTripsLinks$Outbound | undefined;
};

/** @internal */
export const GetTripsResponseBody$outboundSchema: z.ZodType<
    GetTripsResponseBody$Outbound,
    z.ZodTypeDef,
    GetTripsResponseBody
> = z.object({
    data: z.array(components.Trip$outboundSchema).optional(),
    links: z.lazy(() => GetTripsLinks$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTripsResponseBody$ {
    /** @deprecated use `GetTripsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetTripsResponseBody$inboundSchema;
    /** @deprecated use `GetTripsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetTripsResponseBody$outboundSchema;
    /** @deprecated use `GetTripsResponseBody$Outbound` instead. */
    export type Outbound = GetTripsResponseBody$Outbound;
}

/** @internal */
export const GetTripsResponseResult$inboundSchema: z.ZodType<
    GetTripsResponseResult,
    z.ZodTypeDef,
    unknown
> = z.union([z.lazy(() => GetTripsResponseBody$inboundSchema), b64$.zodInbound]);

/** @internal */
export type GetTripsResponseResult$Outbound = GetTripsResponseBody$Outbound | Uint8Array;

/** @internal */
export const GetTripsResponseResult$outboundSchema: z.ZodType<
    GetTripsResponseResult$Outbound,
    z.ZodTypeDef,
    GetTripsResponseResult
> = z.union([z.lazy(() => GetTripsResponseBody$outboundSchema), b64$.zodOutbound]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTripsResponseResult$ {
    /** @deprecated use `GetTripsResponseResult$inboundSchema` instead. */
    export const inboundSchema = GetTripsResponseResult$inboundSchema;
    /** @deprecated use `GetTripsResponseResult$outboundSchema` instead. */
    export const outboundSchema = GetTripsResponseResult$outboundSchema;
    /** @deprecated use `GetTripsResponseResult$Outbound` instead. */
    export type Outbound = GetTripsResponseResult$Outbound;
}

/** @internal */
export const GetTripsResponse$inboundSchema: z.ZodType<GetTripsResponse, z.ZodTypeDef, unknown> = z
    .object({
        Headers: z.record(z.array(z.string())),
        Result: z.union([z.lazy(() => GetTripsResponseBody$inboundSchema), b64$.zodInbound]),
    })
    .transform((v) => {
        return remap$(v, {
            Headers: "headers",
            Result: "result",
        });
    });

/** @internal */
export type GetTripsResponse$Outbound = {
    Headers: { [k: string]: Array<string> };
    Result: GetTripsResponseBody$Outbound | Uint8Array;
};

/** @internal */
export const GetTripsResponse$outboundSchema: z.ZodType<
    GetTripsResponse$Outbound,
    z.ZodTypeDef,
    GetTripsResponse
> = z
    .object({
        headers: z.record(z.array(z.string())),
        result: z.union([z.lazy(() => GetTripsResponseBody$outboundSchema), b64$.zodOutbound]),
    })
    .transform((v) => {
        return remap$(v, {
            headers: "Headers",
            result: "Result",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTripsResponse$ {
    /** @deprecated use `GetTripsResponse$inboundSchema` instead. */
    export const inboundSchema = GetTripsResponse$inboundSchema;
    /** @deprecated use `GetTripsResponse$outboundSchema` instead. */
    export const outboundSchema = GetTripsResponse$outboundSchema;
    /** @deprecated use `GetTripsResponse$Outbound` instead. */
    export type Outbound = GetTripsResponse$Outbound;
}
