/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
 */
export const Currency = {
    Bam: "bam",
    Bgn: "bgn",
    Chf: "chf",
    Eur: "eur",
    Gbp: "gbp",
    Nok: "nok",
    Sek: "sek",
    Try: "try",
} as const;
/**
 * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
 */
export type Currency = ClosedEnum<typeof Currency>;

/**
 * The type of entity that holds the account. This can be either `individual` or `company`.
 */
export const AccountType = {
    Individual: "individual",
    Company: "company",
} as const;
/**
 * The type of entity that holds the account. This can be either `individual` or `company`.
 */
export type AccountType = ClosedEnum<typeof AccountType>;

/**
 * A bank account to take payment from. Must be able to make payments in the currency specified in the payment.
 */
export type BankAccount = {
    object?: "bank_account" | undefined;
    name: string;
    /**
     * The account number for the bank account, in string form. Must be a current account.
     */
    number: string;
    /**
     * The sort code for the bank account, in string form. Must be a six-digit number.
     */
    sortCode?: string | undefined;
    /**
     * The type of entity that holds the account. This can be either `individual` or `company`.
     */
    accountType: AccountType;
    /**
     * The name of the bank associated with the routing number.
     */
    bankName: string;
    /**
     * Two-letter country code (ISO 3166-1 alpha-2).
     */
    country: string;
};

/**
 * A card (debit or credit) to take payment from.
 */
export type Card = {
    object?: "card" | undefined;
    /**
     * Cardholder's full name as it appears on the card.
     */
    name: string;
    /**
     * The card number, as a string without any separators. On read all but the last four digits will be masked for security.
     */
    number: string;
    /**
     * Card security code, 3 or 4 digits usually found on the back of the card.
     */
    cvc: number;
    /**
     * Two-digit number representing the card's expiration month.
     */
    expMonth: number;
    /**
     * Four-digit number representing the card's expiration year.
     */
    expYear: number;
    addressLine1?: string | undefined;
    addressLine2?: string | undefined;
    addressCity?: string | undefined;
    addressCountry: string;
    addressPostCode?: string | undefined;
};

/**
 * The payment source to take the payment from. This can be a card or a bank account. Some of these properties will be hidden on read to protect PII leaking.
 */
export type Source = BankAccount | Card;

export type BookingPayment = {
    /**
     * Amount intended to be collected by this payment. A positive decimal figure describing the amount to be collected.
     */
    amount?: number | undefined;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
     */
    currency?: Currency | undefined;
    /**
     * The payment source to take the payment from. This can be a card or a bank account. Some of these properties will be hidden on read to protect PII leaking.
     */
    source?: BankAccount | Card | undefined;
};

/** @internal */
export const Currency$inboundSchema: z.ZodNativeEnum<typeof Currency> = z.nativeEnum(Currency);

/** @internal */
export const Currency$outboundSchema: z.ZodNativeEnum<typeof Currency> = Currency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Currency$ {
    /** @deprecated use `Currency$inboundSchema` instead. */
    export const inboundSchema = Currency$inboundSchema;
    /** @deprecated use `Currency$outboundSchema` instead. */
    export const outboundSchema = Currency$outboundSchema;
}

/** @internal */
export const AccountType$inboundSchema: z.ZodNativeEnum<typeof AccountType> =
    z.nativeEnum(AccountType);

/** @internal */
export const AccountType$outboundSchema: z.ZodNativeEnum<typeof AccountType> =
    AccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountType$ {
    /** @deprecated use `AccountType$inboundSchema` instead. */
    export const inboundSchema = AccountType$inboundSchema;
    /** @deprecated use `AccountType$outboundSchema` instead. */
    export const outboundSchema = AccountType$outboundSchema;
}

/** @internal */
export const BankAccount$inboundSchema: z.ZodType<BankAccount, z.ZodTypeDef, unknown> = z
    .object({
        object: z.literal("bank_account").optional(),
        name: z.string(),
        number: z.string(),
        sort_code: z.string().optional(),
        account_type: AccountType$inboundSchema,
        bank_name: z.string(),
        country: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            sort_code: "sortCode",
            account_type: "accountType",
            bank_name: "bankName",
        });
    });

/** @internal */
export type BankAccount$Outbound = {
    object: "bank_account";
    name: string;
    number: string;
    sort_code?: string | undefined;
    account_type: string;
    bank_name: string;
    country: string;
};

/** @internal */
export const BankAccount$outboundSchema: z.ZodType<
    BankAccount$Outbound,
    z.ZodTypeDef,
    BankAccount
> = z
    .object({
        object: z.literal("bank_account").default("bank_account" as const),
        name: z.string(),
        number: z.string(),
        sortCode: z.string().optional(),
        accountType: AccountType$outboundSchema,
        bankName: z.string(),
        country: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            sortCode: "sort_code",
            accountType: "account_type",
            bankName: "bank_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccount$ {
    /** @deprecated use `BankAccount$inboundSchema` instead. */
    export const inboundSchema = BankAccount$inboundSchema;
    /** @deprecated use `BankAccount$outboundSchema` instead. */
    export const outboundSchema = BankAccount$outboundSchema;
    /** @deprecated use `BankAccount$Outbound` instead. */
    export type Outbound = BankAccount$Outbound;
}

/** @internal */
export const Card$inboundSchema: z.ZodType<Card, z.ZodTypeDef, unknown> = z
    .object({
        object: z.literal("card").optional(),
        name: z.string(),
        number: z.string(),
        cvc: z.number().int(),
        exp_month: z.number().int(),
        exp_year: z.number().int(),
        address_line1: z.string().optional(),
        address_line2: z.string().optional(),
        address_city: z.string().optional(),
        address_country: z.string(),
        address_post_code: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            exp_month: "expMonth",
            exp_year: "expYear",
            address_line1: "addressLine1",
            address_line2: "addressLine2",
            address_city: "addressCity",
            address_country: "addressCountry",
            address_post_code: "addressPostCode",
        });
    });

/** @internal */
export type Card$Outbound = {
    object: "card";
    name: string;
    number: string;
    cvc: number;
    exp_month: number;
    exp_year: number;
    address_line1?: string | undefined;
    address_line2?: string | undefined;
    address_city?: string | undefined;
    address_country: string;
    address_post_code?: string | undefined;
};

/** @internal */
export const Card$outboundSchema: z.ZodType<Card$Outbound, z.ZodTypeDef, Card> = z
    .object({
        object: z.literal("card").default("card" as const),
        name: z.string(),
        number: z.string(),
        cvc: z.number().int(),
        expMonth: z.number().int(),
        expYear: z.number().int(),
        addressLine1: z.string().optional(),
        addressLine2: z.string().optional(),
        addressCity: z.string().optional(),
        addressCountry: z.string(),
        addressPostCode: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            expMonth: "exp_month",
            expYear: "exp_year",
            addressLine1: "address_line1",
            addressLine2: "address_line2",
            addressCity: "address_city",
            addressCountry: "address_country",
            addressPostCode: "address_post_code",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Card$ {
    /** @deprecated use `Card$inboundSchema` instead. */
    export const inboundSchema = Card$inboundSchema;
    /** @deprecated use `Card$outboundSchema` instead. */
    export const outboundSchema = Card$outboundSchema;
    /** @deprecated use `Card$Outbound` instead. */
    export type Outbound = Card$Outbound;
}

/** @internal */
export const Source$inboundSchema: z.ZodType<Source, z.ZodTypeDef, unknown> = z.union([
    z.lazy(() => BankAccount$inboundSchema),
    z.lazy(() => Card$inboundSchema),
]);

/** @internal */
export type Source$Outbound = BankAccount$Outbound | Card$Outbound;

/** @internal */
export const Source$outboundSchema: z.ZodType<Source$Outbound, z.ZodTypeDef, Source> = z.union([
    z.lazy(() => BankAccount$outboundSchema),
    z.lazy(() => Card$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source$ {
    /** @deprecated use `Source$inboundSchema` instead. */
    export const inboundSchema = Source$inboundSchema;
    /** @deprecated use `Source$outboundSchema` instead. */
    export const outboundSchema = Source$outboundSchema;
    /** @deprecated use `Source$Outbound` instead. */
    export type Outbound = Source$Outbound;
}

/** @internal */
export const BookingPayment$inboundSchema: z.ZodType<BookingPayment, z.ZodTypeDef, unknown> =
    z.object({
        amount: z.number().optional(),
        currency: Currency$inboundSchema.optional(),
        source: z
            .union([z.lazy(() => BankAccount$inboundSchema), z.lazy(() => Card$inboundSchema)])
            .optional(),
    });

/** @internal */
export type BookingPayment$Outbound = {
    amount?: number | undefined;
    currency?: string | undefined;
    source?: BankAccount$Outbound | Card$Outbound | undefined;
};

/** @internal */
export const BookingPayment$outboundSchema: z.ZodType<
    BookingPayment$Outbound,
    z.ZodTypeDef,
    BookingPayment
> = z.object({
    amount: z.number().optional(),
    currency: Currency$outboundSchema.optional(),
    source: z
        .union([z.lazy(() => BankAccount$outboundSchema), z.lazy(() => Card$outboundSchema)])
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BookingPayment$ {
    /** @deprecated use `BookingPayment$inboundSchema` instead. */
    export const inboundSchema = BookingPayment$inboundSchema;
    /** @deprecated use `BookingPayment$outboundSchema` instead. */
    export const outboundSchema = BookingPayment$outboundSchema;
    /** @deprecated use `BookingPayment$Outbound` instead. */
    export type Outbound = BookingPayment$Outbound;
}
