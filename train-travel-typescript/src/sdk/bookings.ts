/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { bookingsCreateBooking, CreateBookingAcceptEnum } from "../funcs/bookingsCreateBooking.js";
import { bookingsDeleteBooking } from "../funcs/bookingsDeleteBooking.js";
import { bookingsGetBooking, GetBookingAcceptEnum } from "../funcs/bookingsGetBooking.js";
import { bookingsGetBookings, GetBookingsAcceptEnum } from "../funcs/bookingsGetBookings.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { GetBookingsAcceptEnum } from "../funcs/bookingsGetBookings.js";

export { CreateBookingAcceptEnum } from "../funcs/bookingsCreateBooking.js";

export { GetBookingAcceptEnum } from "../funcs/bookingsGetBooking.js";

export class Bookings extends ClientSDK {
    /**
     * List existing bookings
     *
     * @remarks
     * Returns a list of all trip bookings by the authenticated user.
     */
    async getBookings(
        options?: RequestOptions & { acceptHeaderOverride?: GetBookingsAcceptEnum }
    ): Promise<operations.GetBookingsResponse> {
        return unwrapAsync(bookingsGetBookings(this, options));
    }

    /**
     * Create a booking
     *
     * @remarks
     * A booking is a temporary hold on a trip. It is not confirmed until the payment is processed.
     */
    async createBooking(
        request: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Buffer,
        options?: RequestOptions & { acceptHeaderOverride?: CreateBookingAcceptEnum }
    ): Promise<operations.CreateBookingResponse> {
        return unwrapAsync(bookingsCreateBooking(this, request, options));
    }

    /**
     * Get a booking
     *
     * @remarks
     * Returns the details of a specific booking.
     */
    async getBooking(
        request: operations.GetBookingRequest,
        options?: RequestOptions & { acceptHeaderOverride?: GetBookingAcceptEnum }
    ): Promise<operations.GetBookingResponse> {
        return unwrapAsync(bookingsGetBooking(this, request, options));
    }

    /**
     * Delete a booking
     *
     * @remarks
     * Deletes a booking, cancelling the hold on the trip.
     */
    async deleteBooking(
        request: operations.DeleteBookingRequest,
        options?: RequestOptions
    ): Promise<operations.DeleteBookingResponse | undefined> {
        return unwrapAsync(bookingsDeleteBooking(this, request, options));
    }
}
